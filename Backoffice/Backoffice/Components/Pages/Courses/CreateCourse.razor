@page "/courses/create"
@using Backoffice.Helpers
@using Newtonsoft.Json
@using System.Net
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Create Course</PageTitle>

<h3>Create Course</h3>
<section class="create-course">
    <div class="container">
        <EditForm Model="Input" OnValidSubmit="Create" method="post" FormName="createcourse">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="title">Title:</label>
                <InputText id="title" @bind-Value="@Input.Title" class="form-control" />
                <ValidationMessage For="@(() => Input.Title)" />
            </div>
            <div class="form-group">
                <label for="author">Author:</label>
                <InputText id="author" @bind-Value="@Input.Author" class="form-control" />
                <ValidationMessage For="@(() => Input.Author)" />
            </div>
            <div class="form-group">
                <label for="image">Image:</label>
                <InputText id="image" @bind-Value="@Input.Image" class="form-control" />
                <ValidationMessage For="@(() => Input.Image)" />
            </div>
            <div class="form-group">
                <label for="isBestseller">Is Bestseller:</label>
                <InputCheckbox id="isBestseller" @bind-Value="@Input.IsBestseller" class="form-control" />
            </div>
            <div class="form-group">
                <label for="hours">Hours:</label>
                <InputText id="hours" @bind-Value="@Input.Hours" class="form-control" />
            </div>
            <div class="form-group">
                <label for="likesInPercent">Likes In Percent:</label>
                <InputText id="likesInPercent" @bind-Value="@Input.LikesInPercent" class="form-control" />
            </div>
            <div class="form-group">
                <label for="numberOfLikes">Number Of Likes:</label>
                <InputText id="numberOfLikes" @bind-Value="@Input.NumberOfLikes" class="form-control" />
            </div>
            <div class="form-group">
                <label for="originalPrice">Original Price:</label>
                <InputNumber id="originalPrice" @bind-Value="@Input.OriginalPrice" class="form-control" />
                <ValidationMessage For="@(() => Input.OriginalPrice)" />
            </div>
            <div class="form-group">
                <label for="discountPrice">Discount Price:</label>
                <InputNumber id="discountPrice" @bind-Value="@Input.DiscountPrice" class="form-control" />
                <ValidationMessage For="@(() => Input.DiscountPrice)" />
            </div>
            <button type="submit" class="btn btn-primary">Create Course</button>
        </EditForm>
    </div>
</section>

@code {

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task Create()
    {
        try
        {
            var query = new GraphQLQuery
                {
                    Query = @"
                    mutation createCourse($input: CourseCreateRequestInput!) {
                    createCourse(input: $input) {
                    id
                    imageUri
                    isBestseller
                    title
                    likesInPercent
                    likes
                    hours
                    
                    }
                }
            }",
                    Variables = Input
                };

            var response = await Http.PostAsJsonAsync("http://localhost:7091/api/graphql", query);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/courses");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();

            }
        }
        catch (Exception ex)
        {

        }
    }

    public sealed class InputModel
    {
        [Required]
        public string Title { get; set; } = "";

        [Required]
        public string Author { get; set; } = "";

        public string Image { get; set; }

        public bool IsBestseller { get; set; }

        public string Hours { get; set; }

        public string LikesInPercent { get; set; }

        public string NumberOfLikes { get; set; }

        [Required]
        [Range(0, double.MaxValue, ErrorMessage = "Original Price must be a positive number.")]
        public decimal OriginalPrice { get; set; }

        [Required]
        [Range(0, double.MaxValue, ErrorMessage = "Discount Price must be a positive number.")]
        public decimal DiscountPrice { get; set; }
    }
}